name: $(version).$(Rev:r)

variables:
  version: 1.1
  buildConfiguration: "Release"
  imageRepository: "emberstack/azure-pipelines-agent"
  DOCKER_CLI_EXPERIMENTAL: 'enabled'

trigger:
  branches:
    include:
      - "*"
  paths:
    include:
    - src/*
    - azure-pipelines.yaml

stages:

  - stage: build
    displayName: "Build"
    jobs:
      
      - job: build_helm
        displayName: "Helm"
        pool:
          vmImage: "Ubuntu-16.04"
        steps:

          - script: |
             mkdir -p artifacts/helm
            workingDirectory: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Create Artifacts directories'

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: '3.1.1'

          - script: |
             cp README.md src/helm/azure-pipelines-agent/README.md
            displayName: 'import README'

          - script: |
             helm package --destination $(Build.ArtifactStagingDirectory)/artifacts/helm --version $(Build.BuildNumber) --app-version $(Build.BuildNumber) src/helm/azure-pipelines-agent
            displayName: 'Helm Package'

          - publish: '$(Build.ArtifactStagingDirectory)/artifacts/helm'
            artifact: 'helm'



      - job: build_docker_amd64
        displayName: "Docker amd64"
        pool:
          vmImage: "Ubuntu-16.04"
        steps:

          - task: DockerInstaller@0
            displayName: 'Install docker'
            inputs:
              dockerVersion: '19.03.5'

          - task: Docker@2
            displayName: 'Build amd64 image'
            inputs:
              containerRegistry: 'Emberstack Docker Hub'
              repository: $(imageRepository)
              Dockerfile: src/docker/Dockerfile
              command: build
              buildContext: src/docker
              tags: 'build-$(Build.BuildNumber)-amd64'

          - task: Docker@2
            displayName: "Push image"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              repository: $(imageRepository)
              command: push
              tags: |
                build-$(Build.BuildNumber)-amd64
              


      - job: build_docker_arm32
        displayName: "Docker arm32"
        pool:
          name: winromulus
          demands:
          - Agent.OSArchitecture -equals ARM
        steps:

          - script: |
             apt-get update
             apt-get install \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg2 \
              software-properties-common
             curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
             add-apt-repository \
              "deb [arch=armhf] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable"
             apt-get update
             apt-get install docker-ce docker-ce-cli containerd.io
            displayName: 'Install docker'

          - task: Docker@2
            displayName: 'Build arm32 image'
            inputs:
              containerRegistry: 'Emberstack Docker Hub'
              repository: $(imageRepository)
              Dockerfile: src/docker/Dockerfile
              command: build
              buildContext: src/docker
              tags: 'build-$(Build.BuildNumber)-arm32'

          - task: Docker@2
            displayName: "Push image"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              repository: $(imageRepository)
              command: push
              tags: |
                build-$(Build.BuildNumber)-arm32



      - job: build_docker_multiarch
        displayName: "Docker multiarch"
        pool:
          vmImage: "Ubuntu-16.04"
        dependsOn: 
          - build_docker_amd64
          - build_docker_arm32
        steps:

          - task: DockerInstaller@0
            displayName: 'Install docker'
            inputs:
              dockerVersion: '19.03.5'

          - task: Docker@2
            displayName: "Docker Hub Login"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              command: login

          - task: Docker@2
            displayName: "Docker Hub Login"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              command: login

          - script: |
              docker manifest create  $(imageRepository):build-$(Build.BuildNumber) $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):build-$(Build.BuildNumber)-arm32
              docker manifest inspect $(imageRepository):build-$(Build.BuildNumber)
              docker manifest push    $(imageRepository):build-$(Build.BuildNumber)
            displayName: "Create and push multi-arch manifest"




  - stage: release
    displayName: "Release"
    dependsOn: 'build'
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Manual'), in(variables['Build.SourceBranchName'], 'master'))
    jobs:
      - job: release
        displayName: "Release Job"
        pool:
          vmImage: "Ubuntu-16.04"
        variables:
          - group: "OpenSource.GitHub"
        steps:

          - checkout: none

          - download: current
            artifact: 'helm'    

          - task: Docker@2
            displayName: "Docker Login"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              command: login

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'

          - script: |
              docker pull $(imageRepository):build-$(Build.BuildNumber)-amd64
              docker pull $(imageRepository):build-$(Build.BuildNumber)-arm32
              docker manifest create $(imageRepository):$(Build.BuildNumber) $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):build-$(Build.BuildNumber)-arm32
              docker manifest create $(imageRepository):latest               $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):build-$(Build.BuildNumber)-arm32
              docker manifest push $(imageRepository):$(Build.BuildNumber)
              docker manifest push $(imageRepository):latest
            displayName: 'docker pull, tag and push'

          - script: |
              git config --global user.email "$(emberstack-agent-email)"
              git config --global user.name "$(emberstack-agent-name)"
              git clone https://$(emberstack-agent-username):$(emberstack-agent-pat)@github.com/EmberStack/helm-charts.git
              
              mkdir -p helm-charts/charts
              cp $(Pipeline.Workspace)/helm/azure-pipelines-agent-$(Build.BuildNumber).tgz  helm-charts/charts
              
              cd helm-charts
              rm index.yaml
              helm repo index ./
              git add .
              git status
              git commit -m "Added azure-pipelines-agent-$(Build.BuildNumber).tgz"
              git push
            displayName: 'Add chart to GitHub repository'

          - task: GitHubRelease@1
            displayName: 'GitHub release (create)'
            inputs:
              gitHubConnection: GitHub
              repositoryName: 'EmberStack/docker-azure-pipelines-agent'
              tagSource: userSpecifiedTag
              tag: 'v$(Build.BuildNumber)'
              title: 'Release v$(Build.BuildNumber)'
              releaseNotesSource: inline
              releaseNotes: 'The release process is automated.'
    