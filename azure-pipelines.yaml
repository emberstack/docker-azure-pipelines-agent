name: $(version).$(Rev:r)

variables:
  version: 2.0
  buildConfiguration: "Release"
  imageRepository: "emberstack/azure-pipelines-agent"
  DOCKER_CLI_EXPERIMENTAL: 'enabled'

trigger:
  branches:
    include:
      - "*"
  paths:
    include:
    - src/*
    - azure-pipelines.yaml

stages:

  - stage: ci
    displayName: "CI"
    jobs:
      - job: build
        displayName: "Build"
        pool:
          vmImage: ubuntu-latest
        steps:

          - task: DockerInstaller@0
            displayName: 'Docker install'
            inputs:
              dockerVersion: '19.03.9'

          - task: Docker@2
            displayName: "Docker login"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              command: login


          - script: |
             mkdir -p artifacts/helm
            workingDirectory: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Create Artifacts directories'

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: '3.1.1'
            displayName: "Helm install"

          - script: |
             cp README.md src/helm/azure-pipelines-agent/README.md
            displayName: 'Import README in helm chart'

          - script: |
             helm package --destination $(Build.ArtifactStagingDirectory)/artifacts/helm --version $(Build.BuildNumber) --app-version $(Build.BuildNumber) src/helm/azure-pipelines-agent
            displayName: 'Helm Package'

          - publish: '$(Build.ArtifactStagingDirectory)/artifacts/helm'
            artifact: 'helm'
            displayName: 'Publish helm artifact'

          - script: |
              docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              docker buildx rm builder
              docker buildx create --name builder --driver docker-container --use
              docker buildx inspect --bootstrap
              docker buildx build --push --platform linux/amd64 -t $(imageRepository):build-$(Build.BuildNumber)-amd64 -f src/docker/Dockerfile src/docker
              docker buildx build --push --platform linux/arm   -t $(imageRepository):build-$(Build.BuildNumber)-arm   -f src/docker/Dockerfile src/docker
              docker buildx build --push --platform linux/arm64 -t $(imageRepository):build-$(Build.BuildNumber)-arm64 -f src/docker/Dockerfile src/docker
              docker pull $(imageRepository):build-$(Build.BuildNumber)-amd64
              docker pull $(imageRepository):build-$(Build.BuildNumber)-arm
              docker pull $(imageRepository):build-$(Build.BuildNumber)-arm64
              docker manifest create  $(imageRepository):build-$(Build.BuildNumber) $(imageRepository):build-$(Build.BuildNumber)-amd64  $(imageRepository):build-$(Build.BuildNumber)-arm  $(imageRepository):build-$(Build.BuildNumber)-arm64
              docker manifest inspect $(imageRepository):build-$(Build.BuildNumber)
              docker manifest push    $(imageRepository):build-$(Build.BuildNumber)
            displayName: "Build and push multi-arch Docker image"

  - stage: cd
    displayName: "CD"
    dependsOn: 'ci'
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Manual'), in(variables['Build.SourceBranchName'], 'master'))
    jobs:
      - job: release
        displayName: "Release Job"
        pool:
          vmImage: ubuntu-latest
        variables:
          - group: "OpenSource.GitHub"
        steps:

          - checkout: none

          - download: current
            artifact: 'helm'
            displayName: "Download helm artifact"    

          - task: DockerInstaller@0
            displayName: 'Docker install'
            inputs:
              dockerVersion: '19.03.9'

          - task: Docker@2
            displayName: "Docker login"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              command: login

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: '3.1.1'
            displayName: "Helm install"

          - script: |
              docker pull $(imageRepository):build-$(Build.BuildNumber)-amd64
              docker pull $(imageRepository):build-$(Build.BuildNumber)-arm
              docker pull $(imageRepository):build-$(Build.BuildNumber)-arm64
              docker manifest create  $(imageRepository):$(Build.BuildNumber) $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):build-$(Build.BuildNumber)-arm $(imageRepository):build-$(Build.BuildNumber)-arm64
              docker manifest create  $(imageRepository):latest               $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):build-$(Build.BuildNumber)-arm $(imageRepository):build-$(Build.BuildNumber)-arm64
              docker manifest push    $(imageRepository):$(Build.BuildNumber)
              docker manifest push    $(imageRepository):latest
              docker manifest push $(imageRepository):$(Build.BuildNumber)
              docker manifest push $(imageRepository):latest
              docker tag $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):$(Build.BuildNumber)-amd64
              docker tag $(imageRepository):build-$(Build.BuildNumber)-arm64 $(imageRepository):$(Build.BuildNumber)-arm64
              docker tag $(imageRepository):build-$(Build.BuildNumber)-arm   $(imageRepository):$(Build.BuildNumber)-arm
              docker push $(imageRepository):$(Build.BuildNumber)-amd64
              docker push $(imageRepository):$(Build.BuildNumber)-arm
              docker push $(imageRepository):$(Build.BuildNumber)-arm64
            displayName: 'Build and push multi-arch Docker image'

          - script: |
              git config --global user.email "$(emberstack-agent-email)"
              git config --global user.name "$(emberstack-agent-name)"
              git clone https://$(emberstack-agent-username):$(emberstack-agent-pat)@github.com/EmberStack/helm-charts.git
              
              mkdir -p helm-charts/charts
              cp $(Pipeline.Workspace)/helm/azure-pipelines-agent-$(Build.BuildNumber).tgz  helm-charts/charts
              
              cd helm-charts
              rm index.yaml
              helm repo index ./
              git add .
              git status
              git commit -m "Added azure-pipelines-agent-$(Build.BuildNumber).tgz"
              git push
            displayName: 'Create chart release'

          - task: GitHubRelease@1
            displayName: 'Create GitHub release'
            inputs:
              gitHubConnection: GitHub
              repositoryName: 'EmberStack/docker-azure-pipelines-agent'
              tagSource: userSpecifiedTag
              tag: 'v$(Build.BuildNumber)'
              title: 'Release v$(Build.BuildNumber)'
              releaseNotesSource: inline
              releaseNotes: 'The release process is automated.'
    