name: $(version).$(Rev:r)

variables:
  version: 2.1
  imageRepository: "emberstack/azure-pipelines-agent"
  DOCKER_CLI_EXPERIMENTAL: "enabled"

trigger:
  branches:
    include:
      - "*"
  paths:
    include:
      - src/*
      - azure-pipelines.yaml

stages:
  - stage: ci
    displayName: "CI"
    jobs:
      - job: build
        displayName: "Build"
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: "3.7.0"
            displayName: "tools - helm - install"
          - task: DockerInstaller@0
            displayName: "tools - docker - install"
            inputs:
              dockerVersion: "20.10.9"
          - task: Docker@2
            displayName: "tools - docker - login"
            inputs:
              containerRegistry: "Emberstack Docker Hub"
              command: login

          - script: |
              mkdir -p artifacts/helm
            workingDirectory: "$(Build.ArtifactStagingDirectory)"
            displayName: "artifacts - prepare directories"


          - script: |
              cp README.md src/helm/azure-pipelines-agent/README.md
            displayName: "helm - import README"
          - script: |
              helm package --destination $(Build.ArtifactStagingDirectory)/artifacts/helm --version $(Build.BuildNumber) --app-version $(Build.BuildNumber) src/helm/azure-pipelines-agent
            displayName: "helm - template chart"
          - publish: "$(Build.ArtifactStagingDirectory)/artifacts/helm"
            artifact: "helm"
            displayName: "artifacts - publish - helm chart"

          - script: |
              docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              docker buildx rm builder
              docker buildx create --name builder --driver docker-container --use
              docker buildx inspect --bootstrap
              docker buildx build --push --platform linux/amd64 -t $(imageRepository):build-$(Build.BuildNumber)-amd64   -f src/docker/Dockerfile src/docker 
              docker buildx build --push --platform linux/arm   -t $(imageRepository):build-$(Build.BuildNumber)-arm32v7 -f src/docker/Dockerfile src/docker
              docker buildx build --push --platform linux/arm64 -t $(imageRepository):build-$(Build.BuildNumber)-arm64v8 -f src/docker/Dockerfile src/docker
              docker pull $(imageRepository):build-$(Build.BuildNumber)-amd64
              docker pull $(imageRepository):build-$(Build.BuildNumber)-arm32v7
              docker pull $(imageRepository):build-$(Build.BuildNumber)-arm64v8
              docker manifest create  $(imageRepository):build-$(Build.BuildNumber) $(imageRepository):build-$(Build.BuildNumber)-amd64  $(imageRepository):build-$(Build.BuildNumber)-arm32v7  $(imageRepository):build-$(Build.BuildNumber)-arm64v8
              docker manifest inspect $(imageRepository):build-$(Build.BuildNumber)
              docker manifest push    $(imageRepository):build-$(Build.BuildNumber)
            displayName: "docker - build and publish"

  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    - stage: cd
      displayName: "CD"
      dependsOn: "ci"
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Manual'), in(variables['Build.SourceBranchName'], 'main'))
      jobs:
        - job: release
          displayName: "Release"
          pool:
            vmImage: ubuntu-latest
          variables:
            - group: "OpenSource.GitHub"
          steps:
            - checkout: none


            - task: HelmInstaller@1
              inputs:
                helmVersionToInstall: "3.7.0"
              displayName: "tools - helm - install"
            - task: DockerInstaller@0
              displayName: "tools - docker - install"
              inputs:
                dockerVersion: "20.10.9"
            - task: Docker@2
              displayName: "tools - docker - login"
              inputs:
                containerRegistry: "Emberstack Docker Hub"
                command: login


            - download: current
              artifact: "helm"
              displayName: "artifacts - download - helm chart"


            - script: |
                docker pull $(imageRepository):build-$(Build.BuildNumber)-amd64
                docker pull $(imageRepository):build-$(Build.BuildNumber)-arm32v7
                docker pull $(imageRepository):build-$(Build.BuildNumber)-arm64v8
                docker manifest create  $(imageRepository):$(Build.BuildNumber) $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):build-$(Build.BuildNumber)-arm32v7 $(imageRepository):build-$(Build.BuildNumber)-arm64v8
                docker manifest create  $(imageRepository):latest               $(imageRepository):build-$(Build.BuildNumber)-amd64 $(imageRepository):build-$(Build.BuildNumber)-arm32v7 $(imageRepository):build-$(Build.BuildNumber)-arm64v8
                docker manifest push    $(imageRepository):$(Build.BuildNumber)
                docker manifest push    $(imageRepository):latest
                docker manifest push    $(imageRepository):$(Build.BuildNumber)
                docker manifest push    $(imageRepository):latest
                docker tag  $(imageRepository):build-$(Build.BuildNumber)-amd64     $(imageRepository):$(Build.BuildNumber)-amd64
                docker tag  $(imageRepository):build-$(Build.BuildNumber)-arm32v7   $(imageRepository):$(Build.BuildNumber)-arm32v7
                docker tag  $(imageRepository):build-$(Build.BuildNumber)-arm64v8   $(imageRepository):$(Build.BuildNumber)-arm64v8
                docker push $(imageRepository):$(Build.BuildNumber)-amd64
                docker push $(imageRepository):$(Build.BuildNumber)-arm32v7
                docker push $(imageRepository):$(Build.BuildNumber)-arm64v8
              displayName: "Build and push multi-arch Docker image"
            - script: |
                git config --global user.email "$(emberstack-agent-email)"
                git config --global user.name "$(emberstack-agent-name)"
                git clone https://$(emberstack-agent-username):$(emberstack-agent-pat)@github.com/emberstack/helm-charts.git

                mkdir -p helm-charts/charts
                cp $(Pipeline.Workspace)/helm/azure-pipelines-agent-$(Build.BuildNumber).tgz  helm-charts/charts

                cd helm-charts
                rm index.yaml
                helm repo index ./
                git add .
                git status
                git commit -m "Added azure-pipelines-agent-$(Build.BuildNumber).tgz"
                git push
              displayName: "github - release - chart"

            - task: GitHubRelease@1
              displayName: "github - create release"
              inputs:
                gitHubConnection: GitHub
                repositoryName: "EmberStack/docker-azure-pipelines-agent"
                tagSource: userSpecifiedTag
                tag: "v$(Build.BuildNumber)"
                title: "Release v$(Build.BuildNumber)"
                releaseNotesSource: inline
                releaseNotes: "The release process is automated."
