name: Continuous Integration

on:
  push:
    paths:
      - "src/*"
      - ".github/workflows/*"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      version: 2.1.${{github.run_number}}
      imageRepository: "emberstack/azure-pipelines-agent"
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:

      - name: tools - helm - install
        uses: azure/setup-helm@v1
      # - run:  echo "Hello ${{ env.version}}"

      # - name: tools - docker - install
      #   uses: actions-hub/docker/cli@master
      #   env:
      #     SKIP_LOGIN: true

      # - name: tools - docker - login
      #   uses: actions-hub/docker/login@master
      #   env:
      #     DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: tools - docker - login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      - name: artifacts - prepare directories
        run: docker login --


      - name: artifacts - prepare directories
        run: mkdir -p .artifacts/helm

      - name: checkout
        uses: actions/checkout@v1

      - name: helm - import README
        run: cp README.md src/helm/azure-pipelines-agent/README.md

      - name: helm - template chart
        run: helm package --destination .artifacts/helm --version ${{env.version}} --app-version ${{env.version}} src/helm/azure-pipelines-agent

      - name: "artifacts - publish - helm chart"
        uses: actions/upload-artifact@master
        with:
          name: helm
          path: .artifacts/helm

      - name: "docker - build and publish"
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          # docker buildx rm builder
          docker buildx create --name builder --driver docker-container --use
          docker buildx inspect --bootstrap
          docker buildx build --push --platform linux/amd64 -t ${{env.imageRepository}}:build-${{env.version}}-amd64   -f src/docker/Dockerfile src/docker 
          # docker buildx build --push --platform linux/arm   -t ${{env.imageRepository}}:build-${{env.version}}-arm32v7 -f src/docker/Dockerfile src/docker
          # docker buildx build --push --platform linux/arm64 -t ${{env.imageRepository}}:build-${{env.version}}-arm64v8 -f src/docker/Dockerfile src/docker
          # docker pull ${{env.imageRepository}}:build-${{env.version}}-amd64
          # docker pull ${{env.imageRepository}}:build-${{env.version}}-arm32v7
          # docker pull ${{env.imageRepository}}:build-${{env.version}}-arm64v8
          # docker manifest create  ${{env.imageRepository}}:build-${{env.version}} ${{env.imageRepository}}:build-${{env.version}}-amd64  ${{env.imageRepository}}:build-${{env.version}}-arm32v7  ${{env.imageRepository}}:build-${{env.version}}-arm64v8
          # docker manifest inspect ${{env.imageRepository}}:build-${{env.version}}
          # docker manifest push    ${{env.imageRepository}}:build-${{env.version}}